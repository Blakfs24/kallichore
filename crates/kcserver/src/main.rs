//
// main.rs
//
// Copyright (C) 2024-2025 Posit Software, PBC. All rights reserved.
//
//

//! Main binary entry point for openapi_client implementation.

#![allow(missing_docs)]

use std::fs::File;

use clap::{command, Parser};

mod client_session;
use log::LevelFilter;
use rand::Rng;
use simplelog::{ColorChoice, CombinedLogger, Config, TermLogger, TerminalMode, WriteLogger};
mod connection_file;
mod error;
mod execution_queue;
mod heartbeat;
mod jupyter_messages;
mod kernel_connection;
mod kernel_session;
mod kernel_state;
mod registration_file;
mod registration_socket;
mod server;
mod startup_status;
mod wire_message;
mod wire_message_header;
mod working_dir;
mod zmq_ws_proxy;

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// The port to bind the server to
    #[arg(short, long, default_value_t = 0)]
    port: u16,

    /// The path to a file containing the authentication token, or the special
    /// string "none" to disable authentication. If omitted, a random token will
    /// be generated.
    #[arg(short, long)]
    token: Option<String>,

    /// The path to a log file. If specified, log output will be written to this
    /// file in addition to standard streams.
    #[arg(long)]
    log_file: Option<String>,

    /// The path to a connection file. If specified, the server will select a
    /// port and authentication token itself, and write them to the given file.
    #[arg(long)]
    connection_file: Option<String>,

    /// The number of hours of idle time before the server shuts down. The
    /// server is considered idle if all sessions are idle and no session is
    /// connected. If not specified, the server will not shut down due to
    /// inactivity; if set to 0, the server will shut down after 30 seconds when
    /// idle.
    #[arg(short, long)]
    idle_shutdown_hours: Option<u16>,

    /// The log level to use. Valid values are "trace", "debug", "info", "warn",
    /// and "error". If not specified, the default log level is "info", or the
    /// value of `RUST_LOG` if set.
    #[arg(short, long)]
    log_level: Option<String>,
}

/// Create custom server, wire it to the autogenerated router,
/// and pass it to the web server.
#[tokio::main]
async fn main() {
    // Parse command line arguments
    let args = Args::parse();

    // Derive the log level
    let log_level = match args.log_level {
        Some(ref level) => {
            // If the log level is set in the command-line arguments, use it
            level.to_string()
        }
        None => match std::env::var("RUST_LOG") {
            Ok(level) => {
                // If the log level is set in the RUST_LOG environment variable, use it
                level
            }
            Err(_) => {
                // If no log level is set, use "info"
                "info".to_string()
            }
        },
    };

    // Match the log level to a `LevelFilter`
    let log_level = match log_level.as_str() {
        "trace" => LevelFilter::Trace,
        "debug" => LevelFilter::Debug,
        "info" => LevelFilter::Info,
        "warn" => LevelFilter::Warn,
        "error" => LevelFilter::Error,
        _ => {
            println!("Invalid log level '{}'; using 'info'", log_level);
            LevelFilter::Info
        }
    };

    // Check to see if a log file was provided
    match args.log_file {
        Some(ref log_file) => {
            // A log file was provided; use a combined logger that writes to the
            // log file and stdout
            if let Err(err) = CombinedLogger::init(vec![
                TermLogger::new(
                    log_level,
                    Config::default(),
                    TerminalMode::Mixed,
                    ColorChoice::Auto,
                ),
                WriteLogger::new(
                    log_level,
                    Config::default(),
                    File::create(log_file).unwrap(),
                ),
            ]) {
                // Consider it a fatal error if we can't initialize logging
                println!(
                    "Failed to initialize combined file/terminal logging: {}",
                    err
                );
                std::process::exit(1);
            }
        }
        None => {
            // No log file was provided; use a terminal logger only
            if let Err(err) = TermLogger::init(
                log_level,
                Config::default(),
                TerminalMode::Mixed,
                ColorChoice::Auto,
            ) {
                // Consider it a fatal error if we can't initialize logging
                println!("Failed to initialize terminal logging: {}", err);
                std::process::exit(1);
            }
        }
    }

    // Check if the port is already in use
    let port = match args.port {
        0 => {
            // If the port is 0, pick a random port
            let port = portpicker::pick_unused_port().unwrap_or(0);
            println!("Using random port: {}", port);
            port
        }
        _ => {
            // If the port is not 0, check if it's free
            if !portpicker::is_free_tcp(args.port) {
                log::error!("Port {} is already in use", args.port);
                std::process::exit(1);
            }
            println!("Using specified port: {}", args.port);
            args.port
        }
    };

    // See if a token file was provided
    let token = match args.token {
        Some(ref token_file) => {
            if token_file == "none" {
                log::warn!("Authentication was disabled with --token none.");
                None
            } else {
                match std::fs::read_to_string(token_file) {
                    Ok(token) => {
                        // Trim the whitespace from the token
                        let token = token.trim();

                        // Ensure the token isn't longer than 64 characters;
                        // this needs to fit in an HTTP header
                        if token.len() > 64 {
                            log::error!("Auth token is too long (max 64 characters)");
                            std::process::exit(1);
                        }

                        // Attempt to delete the file after reading it; since
                        // the path to the file is visible in the process list,
                        // this is a security measure
                        if let Err(e) = std::fs::remove_file(token_file) {
                            log::warn!("Failed to delete token file '{}': {}", token_file, e);
                        }

                        log::trace!("Using auth token from file");
                        Some(token.to_string())
                    }
                    Err(e) => {
                        log::error!("Failed to read token file '{}': {}", token_file, e);
                        std::process::exit(1);
                    }
                }
            }
        }
        None => {
            // Generate a random token
            let mut rng = rand::thread_rng();
            let mut hex_string = String::with_capacity(32);

            for _ in 0..8 {
                let byte: u8 = rng.gen();
                hex_string.push_str(&format!("{:02x}", byte));
            }

            // Log the generated token for debugging purposes
            log::info!("Generated random auth token: {}", hex_string);

            Some(hex_string)
        }
    };

    println!(
        r#"
  ,            _   _           _
 /|   /       | | | | o       | |
  |__/   __,  | | | |     __  | |     __   ,_    _
  | \   /  |  |/  |/  |  /    |/ \   /  \_/  |  |/
  |  \_/\_/|_/|__/|__/|_/\___/|   |_/\__/    |_/|__/
  A Jupyter Kernel supervisor. Version {}.
  Copyright (c) 2025, Posit Software PBC. All rights reserved.
"#,
        env!("CARGO_PKG_VERSION")
    );

    // Start the server
    let addr = format!("127.0.0.1:{}", port);
    println!("Listening at {}", addr);

    // If a connection file path was specified, write the connection details to it
    if let Some(connection_file_path) = &args.connection_file {
        if let Err(e) =
            write_server_connection_file(connection_file_path, port, &addr, &token, &args.log_file)
        {
            log::error!("Failed to write connection file: {}", e);
            std::process::exit(1);
        }
        log::info!("Wrote connection details to {}", connection_file_path);
    }

    log::info!("Starting Kallichore server at {}", addr);

    // Pass the log level from command line arguments to the server
    server::create(&addr, token, args.idle_shutdown_hours, args.log_level).await;
}

/// Write server connection details to a file
fn write_server_connection_file(
    path: &str,
    port: u16,
    addr: &str,
    token: &Option<String>,
    log_file: &Option<String>,
) -> Result<(), Box<dyn std::error::Error>> {
    use serde::{Deserialize, Serialize};
    use std::fs::File;
    use std::io::Write;

    #[derive(Serialize, Deserialize)]
    struct ServerConnectionInfo {
        /// The port the server is listening on
        port: u16,

        /// The full API basepath, starting with 'http'
        base_path: String,

        /// The path to the server executable (this process)
        server_path: String,

        /// The PID of the server process
        server_pid: u32,

        /// The authentication token, if any
        bearer_token: Option<String>,

        /// The path to the log file, if any
        log_path: Option<String>,
    }

    // Get the server path
    let server_path = std::env::current_exe()?
        .to_str()
        .ok_or("Failed to convert server path to string")?
        .to_string();

    // Get the server PID
    let server_pid = std::process::id();

    // Create the connection info struct
    let connection_info = ServerConnectionInfo {
        port,
        base_path: format!("http://{}", addr),
        server_path,
        server_pid,
        bearer_token: token.clone(),
        log_path: log_file.clone(),
    };

    // Serialize to JSON
    let json = serde_json::to_string_pretty(&connection_info)?;

    // Write to file
    let mut file = File::create(path)?;
    file.write_all(json.as_bytes())?;

    Ok(())
}
